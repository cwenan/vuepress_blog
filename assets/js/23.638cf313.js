(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{451:function(t,v,_){"use strict";_.r(v);var i=_(12),s=Object(i.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"差异流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#差异流"}},[t._v("#")]),t._v(" 差异流")]),t._v(" "),_("p",[t._v("Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方式。 从概念上来说，其它大部分系统以文件变更列表的方式存储信息，这类系统（CVS、Subversion、Perforce、Bazaar 等等） 将它们存储的信息看作是一"),_("strong",[t._v("组基本文件和每个文件随时间逐步累积的差异")]),t._v(" （它们通常称作 "),_("strong",[t._v("基于差异（delta-based）")]),t._v(" 的版本控制）。")]),t._v(" "),_("blockquote",[_("p",[t._v("基本文件+改动")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cwenan/blog.img/20210727153120.png",alt:"image-20210727153118988"}})]),t._v(" "),_("h2",{attrs:{id:"快照流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快照流"}},[t._v("#")]),t._v(" 快照流")]),t._v(" "),_("p",[t._v("Git 不按照以上方式对待或保存数据。反之，Git 更像是把数据看作是对小型文件系统的一系列快照。 在 Git 中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件"),_("strong",[t._v("创建一个快照并保存这个快照的索引")]),t._v("。 为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 "),_("strong",[t._v("快照流")]),t._v("。")]),t._v(" "),_("blockquote",[_("p",[t._v("快照即是以索引为导向，指向当时保存的状态")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cwenan/blog.img/20210727153310.png",alt:"image-20210727153309210"}})]),t._v(" "),_("p",[t._v("Git特点：")]),t._v(" "),_("ul",[_("li",[t._v("几乎所有操作都是在本地上面完成")]),t._v(" "),_("li",[t._v("Git保证完整性（"),_("strong",[t._v("哈希算法")]),t._v("）")]),t._v(" "),_("li",[_("strong",[t._v("Git一般只做添加数据操作")])])]),t._v(" "),_("h2",{attrs:{id:"工作流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("Git的三种状态："),_("strong",[t._v("已提交（committed）")]),t._v("、"),_("strong",[t._v("已修改（modified）")]),t._v(" 和 "),_("strong",[t._v("已暂存（staged）")])]),t._v(" "),_("ul",[_("li",[t._v("已修改表示修改了文件，但还没保存到数据库中。")]),t._v(" "),_("li",[t._v("已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。")]),t._v(" "),_("li",[t._v("已提交表示数据已经安全地保存在本地数据库中")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("工作区、暂存区、本地库")])]),t._v(" "),_("ul",[_("li",[t._v("工作区：就是在电脑里面能看到的目录，也是我们平时直接写代码的地方")]),t._v(" "),_("li",[t._v("暂存区：.git目录里面的index文件，也称作索引")]),t._v(" "),_("li",[t._v("本地库：git项目的.git目录就是版本库，是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。")]),t._v(" "),_("li",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cwenan/blog.img/20210727154931.png",alt:"image-20210727154929866"}})])])])]),t._v(" "),_("p",[t._v("基本的工作流程：")]),t._v(" "),_("ul",[_("li",[t._v("修改工作区的文件")]),t._v(" "),_("li",[t._v("提交到暂存区")]),t._v(" "),_("li",[t._v("提交到本地库")]),t._v(" "),_("li",[t._v("如果 Git 目录中保存着特定版本的文件，就属于 "),_("strong",[t._v("已提交")]),t._v(" 状态。 如果文件已修改并放入暂存区，就属于 "),_("strong",[t._v("已暂存")]),t._v(" 状态。 如果自"),_("strong",[t._v("上次")]),t._v("检出后，作了修改但还没有放到暂存区域，就是 "),_("strong",[t._v("已修改")]),t._v(" 状态。")])])])}),[],!1,null,null,null);v.default=s.exports}}]);